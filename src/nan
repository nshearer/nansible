#!/usr/bin/python
'''nansible - Nate's Ansible Deploy Tool

USAGE: nan action (other-flags)

Where action is:
    compile:      Compile source tree (but don't call ansible)
                  Use --keep_compiled to see compiled tree
    test_remote:  Run deployment in test mode to remote host
    test_local:   Run deployment in test mode on local host
    remote:       Compile, then deploy configuration to remote host
    local:        Compile, then deploy configuration to local host
    debug_parse:  Print listing of source files and how they are typed

This tool provides the following features on top of ansible:

  - The collection of roles into folders.
    See Nansible README

  - Automatic file renaming:
      role/handlers.yml -> role/handlers/main.yml
      role/tasks.yml -> role/tasks/main.yml
      role/vars.yml -> role/vars/main.yml
      role/meta.yml -> role/meta/main.yml

  - Execution of autogen scripts

nansible is expected to run from a folder with the structure of:

   source/                    -->   compiled/
    |--roles/                        |--roles/
    |   `--standard_roles/...        |   |--standard_roles/...
    |--projects/                     |   |--project_a__proj_role_a/
    |   `--project_a/                |   `--project_a__proj_role_v/
    |       |--proj_role_a/...       `--main.yml
    |       |--proj_role_b/
    |       |   `--tasks/
    |       |       |--enabled.yml
    |       |       |--disabled.yml
    |       |       `--purged.yml
    |       `--project.yml
    |--main.yml
    `--hosts

'''
import os
import sys
import gflags
import shutil
import tempfile
import subprocess
import yaml
import stat

from nansible.RootSourceFolder import RootSourceFolder
from nansible.main_template import write_main_file

gflags.DEFINE_string(
    'cmpfolder',
    short_name      = 'c',
    default         = None,
    help            = "Folder to compile ansible tree to")

gflags.DEFINE_string(
    'source',
    short_name      = 's',
    default         = './',
    help            = "Ansible root folder")

gflags.DEFINE_string(
    'play',
    short_name      = 'p',
    default         = 'main.yml',
    help            = "Ansible playbook to call when deploying")

# gflags.DEFINE_string(
#     'project_play',
#     short_name      = 'n',
#     default         = 'nan_projects.yml',
#     help            = "Name of playbook to create for include projects")

gflags.DEFINE_string(
    'hostpat',
    short_name      = 'h',
    default         = None,
    help            = "Hosts to apply to or 'local'")

gflags.DEFINE_boolean(
    'local',
    default         = False,
    help            = "Deploy locally")

gflags.DEFINE_boolean(
    'delete_compiled',
    default         = False,
    help            = "Delete the contents of the compile target if any exist")

gflags.DEFINE_string(
    'hostsfile',
    short_name      = 'i',
    default         = 'hosts',
    help            = "Path to hosts file")

gflags.DEFINE_boolean(
    'verbose',
    short_name      = 'v',
    default         = False,
    help            = "Show additional output")

gflags.DEFINE_boolean(
    'keep_compiled',
    short_name      = 'k',
    default         = False,
    help            = "Don't delete compiled directory")

gflags.DEFINE_boolean(
    'sudo',
    default         = False,
    help            = "Pass --ask-sudo-pass to ansible")

gflags.DEFINE_string(
    'vault_password_file',
    default         = None,
    help            = "Path to vault password file to pass to ansible")

gflags.DEFINE_boolean(
    'vvv',
    default         = False,
    help            = "Pass --vvv to ansible")



def new_phase(phase):
    print ""
    print "--", phase, "-"*(60-len(phase))


def clean_out_compiled_folder(compile_folder):
    for filename in os.listdir(compile_folder):
        if filename not in ['.', '..']:
            path = os.path.join(compile_folder, filename)
            if os.path.isdir(path):
                shutil.rmtree(path)
            elif os.path.isfile(path):
                os.unlink(path)
                
                
if __name__ == '__main__':

    do_compile = True
    do_deploy = False

    # Parse arguments
    try:
        argv = sys.argv[1:]
        
        # Parse action first
        action = None
        valid_actions = (
            'compile',
            'test_remote',
            'test_local',
            'remote',
            'local',
            'debug_parse',
            )
        if len(argv) > 0:
            action = argv[0]
            if action not in valid_actions:
                raise gflags.FlagsError("Invalid action: " + action)
        else:
            raise gflags.FlagsError("Must specify action")
        
        if action in ['remote', 'local', 'test_remote', 'test_local']:
            do_deploy = True
            
        # Parse gflags
        argv = argv[1:]
        argv.insert(0, sys.argv[0])
        argv = gflags.FLAGS(argv)

        # Check for extra args
        if len(argv) > 1:
            raise gflags.FlagsError("Extra args: " + str(argv))
        
        flags = gflags.FLAGS

        # Determine source path
        source_path = os.path.abspath(flags.source)
        if not os.path.exists(source_path):
            msg = "Source dir doesn't exist: %s"
            raise gflags.FlagsError(msg % (source_path))
        
#         # Check projects playbook name
#         if os.path.exists(os.path.join(source_path, flags.project_play)):
#             msg = "%s already exists in source.  Won't overwrite"
#             raise gflags.FlagsError(msg % (flags.project_play))

        # Check main playbook name
        if not os.path.exists(os.path.join(source_path, flags.play)):
            msg = "%s does not exist in source"
            raise gflags.FlagsError(msg % (flags.play))

        # If deploying to remote, than hostpat is required
        if action == 'remote':
            if flags.hostpat is None:
                msg = "--hostpat is required for action: remote"
                raise gflags.FlagsError(msg)

    except gflags.FlagsError, e:
        print 'USAGE ERROR: %s\n%s' % (e, gflags.FLAGS)
        sys.exit(1)

    # -- Interpret source tree -----------------------------------------------
    source = RootSourceFolder(source_path)
    
    def recurse_source_objs(source_obj):
        yield source_obj
        if source_obj.isdir:
            for child in source_obj.listdir():
                for grandchild in recurse_source_objs(child):
                    yield grandchild
    all_source_objs = list(recurse_source_objs(source))


    # -- Debug the assigning of types to files in source tree ----------------
    if action == 'debug_parse':
        new_phase("Debugging source parse tree")
        for source_obj in all_source_objs:
            path = source_obj.source_tree_path
            if source_obj.isdir:
                path += '/'
            
            cname = source_obj.__class__.__name__
            
            parent_cname = None
            if source_obj.parent is not None:
                parent_cname = source_obj.parent.__class__.__name__
            
            calc_method = None
            if parent_cname is not None and source_obj.isfile:
                calc_method = '%s._get_file_type()' % (parent_cname)
            elif parent_cname is not None and source_obj.isdir:
                calc_method = '%s._get_folder_type()' % (parent_cname)
                
            indent_depth = 0
            parent = source_obj.parent
            while parent is not None:
                indent_depth += 1
                parent = parent.parent
                
            path = '%-30s' % ('  '*indent_depth + path)
                
            print path + "\t[%s] by %s" %(cname, str(calc_method))
            
            do_compile = False


    # -- Compile source ------------------------------------------------------
    
    new_phase("Compiling")
    compile_folder = None
    created_compile_folder = False
    
    if do_compile:
        
        # Create compilation directory
        compile_folder = flags.cmpfolder
        if compile_folder is None:
            compile_folder = tempfile.mkdtemp()
            created_compile_folder = True
        else:
            compile_folder_parent = os.path.dirname(compile_folder)
            if not os.path.exists(compile_folder_parent):
                msg = "Compile parent folder doesn't exist: "
                print msg + compile_folder_parent
                sys.exit(2)
            if os.path.exists(compile_folder):
                if len(list(os.listdir(compile_folder))) > 0:
                    msg = "Compile folder exists and is not empty: "
                    msg += compile_folder
                    if flags.delete_compiled:
                        print msg + " (deleting)"
                        clean_out_compiled_folder(compile_folder)
                    else:
                        print msg + compile_folder
                        sys.exit(2)
                created_compile_folder = False
            else:
                os.mkdir(compile_folder)
                created_compile_folder = True
        compile_folder = os.path.abspath(compile_folder)

        if flags.verbose:
            print "Compiling from:", source.path
            print "Compiling to:", compile_folder
            print ""
        
        # Do Compile
        for source_obj in all_source_objs:
            print '[%s] %s' % (source_obj.__class__.__name__, source_obj.path)
            source_obj.compile_to(compile_folder)
            
#         # Create projects playbook for inclusion
#         proj_play_path = os.path.join(compile_folder, flags.project_play)
#         write_main_file(main_path)
            
    else:
        print "Compiling skipped"


    # -- Validate Compiled Source --------------------------------------------

    new_phase("Validating source")

    has_validation_error = False
    valid_error_cnt = 0
    valid_warn_cnt = 0
    
    if do_compile:
        
        def print_validation_errors(source_path, errors=None, warnings=None):
            global has_validation_error
            global valid_error_cnt
            global valid_warn_cnt
            
            if errors is None:
                errors = list()
            if warnings is None:
                warnings = list()
            if len(errors) > 0 or len(warnings) > 0:
                print ""
                print source_path + ' has validation errors:'
                for msg in errors:
                    print " - ERROR: " + msg
                    has_validation_error = True
                    valid_error_cnt += 1
                for msg in warnings:
                    print " - " + msg
                    valid_warn_cnt += 1
            
        # Check for hosts file
        hosts_file = os.path.join(compile_folder, flags.hostsfile)
        if not os.path.exists(hosts_file):
            # Try absolute path
            hosts_file = flags.hostsfile
            if not os.path.exists(hosts_file):
                errors = ["Can't find hosts (specify with --hostsfile)", ]
                print_validation_errors(hosts_file, errors=errors)
                
        # Check each source object
        for source_obj in all_source_objs:
            errors = list(source_obj.get_validation_errors())
            warnings = list(source_obj.get_validation_warnings())
            print_validation_errors(source_obj.path, errors, warnings)
            
        # Give summary
        print ""
        if valid_error_cnt > 0:
            print "%d VALIDATION ERRORS" % (valid_error_cnt)
        elif valid_warn_cnt > 0:
            print "%d validation warnigns" % (valid_warn_cnt)
        else:
            print "No valication errors"
            
    else:
        print "Compiling was skipped, so skipping validation"
        
    
    
    # -- Deployment ----------------------------------------------------------

    new_phase("Deploying")
    rtncode = 0
    
    if not has_validation_error and do_compile and do_deploy:
        start_dir = os.path.abspath(os.curdir)
        os.chdir(compile_folder)
        cmd = [
            '/usr/bin/ansible-playbook',
            '-i', hosts_file
            ]
        if flags.sudo:
            cmd.append('--ask-sudo-pass')
        if flags.vault_password_file is not None:
            cmd.extend(('--vault-password-file', flags.vault_password_file))
        if action.startswith('test'):
            cmd.append("--check") 
        cmd.append(flags.play)
        if flags.hostpat is not None:
            cmd.extend(('-l', flags.hostpat))
        else:
            cmd.append('--connection=local')
        
        # Execute
        print " ".join(cmd)
        try:
            subprocess.check_call(cmd,
                stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin)
        except subprocess.CalledProcessError:
            print "ERROR: Ansible Failed"
            
        os.chdir(start_dir)
    elif has_validation_error:
        print "Deployment skipped do to validation errors"
    else:
        print "Deployment skipped"

    # -- Clean Up ------------------------------------------------------------

    new_phase("Finished.  Cleaning Up")

    if not flags.keep_compiled:
        if created_compile_folder:
            shutil.rmtree(compile_folder)
        else:
            if compile_folder is not None:
                clean_out_compiled_folder(compile_folder)
                os.unlink(compile_folder)
    else:
        print "Compiled files kept in %s" % (compile_folder)

    sys.exit(rtncode)
    
